2025年3月3日 13点40分
-更新EEPROM部分库函数，提供EEPROM基础操作函数set_eeprom_base()
-set_eeprom_base支持以下参数Read_Byte,Read_Buff,Write_Byte,Write_Buff,Erase_Sector,Erase_Sectors
-可以支持单字节或者缓冲区模式的读写，单扇区或者连续扇区的擦除
-同时，提供了带有均衡磨损的变量存储函数，set_eeprom_mode()和set_eeprom_sync()
-优先推荐使用以上的两个函数，基础操作函数可以在有特殊需求时使用
-使用方式是先定义一个变量 int num; 然后调用函数set_eeprom_mode(Hex_Mode,&num,sizeof(num));
-即可将变量绑定到EEPROM中，此时通过set_eeprom_sync(Push);即可实现变量->EEPROM存储方向的同步
-使用set_eeprom_sync(Pull);即可实现变量<-EEPROM存储方向的同步，使用上十分方便。
-默认可以绑定10个变量，可以在set_eeprom.h文件中修改EEPROM_Pack_Max来增加绑定数量
-使用中，会自动实现均衡磨损，存储满时会重新擦除后存储，可以将存储寿命等效提高十几倍(仅存储几个变量时)
-(需要注意的是，绑定顺序改变会影响读取，如果改变了变量存储顺序，需要重新Push后再Pull才能正确)

2025年2月26日 23点26分
-更新pwm部分库函数，支持8个pwm通道占空比可调
-pwm部分提供一个void set_pwm_duty(pwm_name pwm, float duty);
-可在配置完成后更改占空比使用
-pwm部分支持死区设定，范围0~1000clk(clk为pwm输入时钟)
-pwm增加支持互补输出，支持单独p通道或者单独n通道输出
-设置周期支持单位hz和khz，占空比支持单位%，死区设置支持单位clk
-使用举例：set_pwm_mode(Pwm1, Pwm1_P00_01, "10khz", "80%", Pwm_End);
-意为设置Pwm1通道切换到P00和P01， 周期为10khz，占空比为80%

2025年2月19日 13点23分
-更新spi部分库函数
-SPI库函数支持3个SPI，分别是SPI0，SPI1(uart1的同步模式，开启后会占用串口1)，SPI2(同上，占用串口2)
-SPI使用DMA发送和接收，同时提供一个spi_printf函数来进行操作
-spi_printf函数拥有Hex_Mode(单字节模式)和Buff_Mode(缓冲区模式)
-SPI配置函数同时也支持默认值和参数乱序输入

2025年2月15日 18点23分
-更新i2c部分库函数
-完成了独立例程5（I2C部分，带有自由指令串组合操作）
-I2C库新增指令串功能，可以实现一句配置完一整串操作
-例如：set_i2c_cmd(I2c0, 1, S_Tx_Rack, 0xa0, Stop, Cmd_End);
-引入任务序号设置方式，i2c操作为非堵塞方式，执行完当前指令串后通过状态查询函数即可得知操作是否完成。
-使用低速率操作IIC也不会造成程序堵塞。

2025年2月14日 15点08分
-补充set_uart.h中有关Use_Timerx的说明
-定时器设置时新增us单位支持，使用"100us"这样的格式也可以了

2025年2月13日 10点58分
-I/O中断、定时器、传统外部中断INT部分增加设置中断函数功能

2025年2月8日 21点43分
-修复传统外部中断INT库函数中的部分错误

2025年2月8日 11点31分
-修正部分程序中的拼写错误
-修正使用说明部分的拼写错误

2025年2月7日 22点25分
-修复所有I/O均可独立中断部分库函数部分错误
-修正I/O部分库函数部分拼写错误
-修正使用说明部分拼写错误

2025年2月6日 15点29分
-更新库函数使用说明的INT部分和定时器部分
-增加详细丰富的例程，优化内容排版

2025年2月6日 12点17分
-更新定时器部分的函数定义和参数输入方式
-定时器部分库函数，新增支持乱序输入和默认值方式
-新增自适应单位，支持hz(赫兹)，ms(毫秒)，s(秒)后缀输入自动识别

2025年2月5日 12点27分
-更新库函数的主频获取部分，使其可以适应所有的HIRC频率
-修改逻辑为手动设置主频后就不再自动获取
-需要注意，主频自动获取仅能获取内部HIRC的频率，外部晶振做主时钟的时候无法获取

2025年1月26日 22点28分
-更新库函数使用说明的IO部分和普通 I/O 口均可中断部分
-新增丰富的使用例程部分，以及优化的表格内容
-修正部分错别字和拼写错误
-对set_io的设置io模式枚举值名称进行改动
-新增支持所有io特殊模式（如转换速度、驱动电流等）的开启和关闭操作

2025年1月22日 22点29分
-增加“教程-如何建立一个项目”，文档详细说明了如何从头建立工程使用库函数
-优化代码占用，改善了set_io和set_ioint的代码体积占用。
-新代码压缩率高达269%，独立例程1优化后编译仅占用code=2320（原占用code=6246）

2025年1月22日 12点38分
-增加自动获取主频功能，适配STC-ISP下载选择的频率
-（除了5.5296Mhz和11.0592Mhz无法自动识别外，其余均可自动识别并参与初始化计算）
-增加独立历程的使用说明，写明了例程的效果

2025年1月21日 12点18分
-增加拓展中断号工具，存放在库函数使用说明文件夹内。
-将更新日志切换为时间倒序，保证最新的更新在最开头。
-调整独立历程4的部分效果描述。
-删除了独立历程内的多余文件，只保留可编译的核心文件。

2025年1月20日 17点56分
-修复串口库函数在接收超出缓冲区数量数据时候的计数错误。
-现在接收大量数据后，会锁定在缓冲区的上限，后续的被自动丢弃，不再接收。

2025年1月20日 15点25分
-更新ADC部分库函数，完成独立例程4使用ADC部分(可设置连续或单次自动转换)。
-修正定时器和串口部分函数与变量的重名冲突问题。

2025年1月19日 21点59分
-更新INT独立中断、定时器部分、串口部分的库函数使用文档

2025年1月18日 19点23分
-完成独立例程3设置串口部分(包含串口DMA)的所有程序，并且测试完毕。
-串口部分使用DMA发送，空闲中断接收。使用串口独立缓冲区完成收发操作。
-使用例程中给出了使用scanf进行交互读取的部分示例。
-中断函数全都是被缓存和代理操作的，无需关心中断部分的处理。

2025年1月17日 12点01分
-串口新增uart_printf函数，可以拥有普通printf功能、hex单字节发送功能、buff缓冲区发送功能。
-普通字符串打印模式：uart_printf(Uart1, "num:%d\r\n",cnt);//可以像正常printf一样使用。
-hex数据单字节输出模式：uart_printf(Uart1, Hex_Mode, 0x12);//输出0x12一个字节的数据。
-buff缓冲区输出模式：uart_printf(Uart1, Buff_Mode, dat, 20);//输出20个字节的数据，从dat数组0地址开始。

2025年1月16日 19点48分
-串口基础配置新增8位无校验、9位奇校验、9位偶校验模式。
-新增模式中，默认值为8位无校验。

2025年1月14日 11点49分
-增加串口库函数基础设置部分，高级部分还未完成。
-串口部分支持新特性：乱序输入和参数默认值。
-例如set_uart_mode(Uart3, "9600bps", "32byte", Use_Timerx, Uart_End);
-意为设置串口3为9600bps，32byte停止中断，使用定时3（对应串口号的定时器）
-引脚切换未填入，为默认Uart3_P00_1，除了第一个参数，后面参数均支持乱序和默认值。

2025年1月12日 13点27分
-修改独立例程1部分错误导致编译不通过的问题，现已测试通过。

2025年1月11日 22点02分
-更新定时器部分的库函数
-完成独立例程"2设置定时器及外部中断部分(T0,T1,T2,T3,T4,T11)"。
-库函数增加高级配置模式，一行代码即可实现定时器自动配置。
-定时器库函数实现了T1/T12和TMxPS的自动使用，可以直接设定5s@40Mhz的定时器一次性中断。
-函数使用举例：set_timer_mode(freq_hz_mode, Timer0, 1.0f);

2025年1月10日 15点35分
-完成外部中断INT部分的库函数。
-添加独立例程"2设置定时器及外部中断部分(T0,T1,T2,T3,T4,T11)"的INT部分测试程序。

2025年1月10日 13点56分
-增加IO/IO口独立中断部分的PDF说明文档

2025年1月10日 12点56分
-更新IO口独立中断部分库函数，库函数支持变长参数传入，测试通过。
-IO口中断状态通过get_ioint_satae(Pin34)函数实现，直接传入对应的引脚即获得中断结果。
-完成“1设置IO部分(包含IO独立中断)”的独立例程编写。

2025年1月9日 12点31分
-更新IO设置部分库函数，库函数支持变长参数传入，测试通过。
-使用举例：set_io_mode(pp_mode,Pin22,Pin24,Pin27,Pin01,Pin_End);//设置P22,P24,P27,P01为推挽输出模式

2025年1月9日 12点22分
-创建库函数工程